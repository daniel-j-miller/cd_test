---
title: "Yeah NAh"
author: "Dan Miller"
description: "A short post about filtering/subsetting data when there are NA values in R"
image: thumb.jpg
date: "2024-12-03"
categories: [code, R]
---


## Filtering in R

When we want to subset some data in R we have a few options, but really all of them under the hood are returning our data (often rows) based on logical, numeric or character indices.

So in the simplest form in base R we can use the ``[`` function to return the elements we want.

```{r}
# Return the first two elements using numeric indices:
c(1,2,3)[1:2]
```
```{r}
# And now Boolean:
c(1,2,3)[c(TRUE,TRUE,FALSE)]
```
```{r}
# And how we would generally do it, by actually testing for equality
dat <- c(1,2,3)
dat[dat != 3]
```
But what if our data has `NA` values?
```{r}
# Filtering by testing equality/inequality with an NA value
dat <- c(1,2,3,NA)
dat[dat != 3]
```
That looks ok, right? It's returning all the things that don't equal 3. But is it really return the `NA` value from the original `dat`? 

Considering that we said we subset with logical, numeric or character indices, what does `dat != 3` return?
```{r}
dat != 3
```
`NA` is not one of the valid values for indexing. The documentation for `[` gives us a clue:

> **NAs in indexing**:
> When extracting, a numerical, logical or character *NA index* picks an *unknown element* and so returns NA in the corresponding element of a logical, integer, numeric, complex or character result, and NULL for a list. 

So what does it matter? Well, it becomes clearer that it's not returning our original NA when we look at more complex data.
```{r}
dat <- data.frame(name = LETTERS[1:16], 
                  feature = sample(c(1:3,NA),16,replace = TRUE))
dat
```
```{r}
dat_base <- dat[dat$feature != 3,]
dat_base
```
The rows where `feature` was `NA` are not actually returned, instead a whole missing row is returned in their place. This is somewhat unexpected unless you know what is happening and it's probably unlikely to be the desired result.

## Filtering with NAs

`dplr::filter()` and `base::subset()` are a little clearer and provide more likely results when filtering with `NA` values present. First `subset()`:
> "For ordinary vectors, the result is simply x[subset & !is.na(subset)]."

```{r}
subset(dat, feature != 3)
```
And `dplyr::filter()` is clearer again:

::: {.callout-tip}
## From the dplyr::filter() documentation:

"The filter() function is used to subset a data frame, retaining all rows that satisfy your conditions. To be retained, **the row must produce a value of TRUE for all conditions**. Note that when a condition evaluates to NA the row will be dropped, **unlike base subsetting with [**."

ðŸ‘€ [dplyr::filter() documentation](https://dplyr.tidyverse.org/reference/filter.html)
:::

```{r}
dat |> dplyr::filter(feature != 3)
```

## But what if I want the `NA` rows?!?!

Well, we need to create a vector that explicitly includes the `NA` values:
```{r}
dat$feature != 3 | is.na(dat$feature)
```
```{r}
dat[dat$feature != 3 | is.na(dat$feature),]
subset(dat, feature != 3 | is.na(feature))
dat |> dplyr::filter(feature != 3 | is.na(feature))
```
